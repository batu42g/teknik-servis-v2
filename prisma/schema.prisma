generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  status    String      @default("pending")
  total     Decimal     @db.Decimal(10, 2)
  phone     String?
  address   String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model User {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  password         String
  name             String
  adSoyad          String
  role             String           @default("user")
  phone            String?
  address          String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  appointments     Appointment[]
  orders           Order[]
  receivedMessages PrivateMessage[] @relation("ReceivedMessages")
  sentMessages     PrivateMessage[] @relation("SentMessages")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  price       Decimal     @db.Decimal(10, 2)
  imageUrl    String?
  category    String      @default("other")
  stock       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  message   String
  status    String   @default("unread")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id          Int               @id @default(autoincrement())
  userId      Int
  serviceType String
  description String
  date        DateTime
  time        String
  status      AppointmentStatus @default(PENDING)
  notes       String?
  phone       String?
  address     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id])
}

model Page {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Slider {
  id        Int      @id @default(autoincrement())
  title     String
  imageUrl  String
  linkUrl   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String
  imageUrl    String?
  linkUrl     String
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ServiceRecord {
  id           Int      @id @default(autoincrement())
  deviceType   String
  brand        String
  model        String
  serialNumber String?
  problem      String
  diagnosis    String?
  solution     String?
  status       String   @default("received")
  cost         Decimal? @db.Decimal(10, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PrivateMessage {
  id          Int      @id @default(autoincrement())
  senderId    Int
  recipientId Int
  subject     String
  body        String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])

  @@index([senderId])
  @@index([recipientId])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  CANCELLED
}
